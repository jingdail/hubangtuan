<template>
	<view>
 
		<view v-if="showSolid || showHollow" :class="['tag-item', 'tag-border', showHollow && 'tag-hollow']" :style="tagTextStyle">
			<text class="tag-text" :style="{ color: fontColor }">{{ value }}</text>
		</view>

		<img v-if="showImage" :src="img" @load="onLoad" :aria-hidden="true" :style="{ width: imgWidth + 'rpx' }" class="tag-image" />

		<view class="tag-special tag-border" :style="{ borderColor: tagColor }" :accessible="true" :aria-label="value" v-if="showSpecial">
			<view class="tag-left" :style="{ backgroundColor: tagColor }"><bui-image :src="specialIcon" class="left-image"></bui-image></view>
			<text class="tag-text" :style="{ color: fontColor }">{{ value }}</text>
		</view>
	</view>
</template>

<script>
module.exports = {
	props: {
		type: {
			type: String,
			default: 'solid'
		},
		value: {
			type: [String, Number],
			default: ''
		},
		tagColor: {
			type: String,
			default: '#5da3f6'
		},
		fontColor: {
			type: String,
			default: '#333333'
		},
		specialIcon: {
			type: String,
			default: ''
		},
		img: {
			type: String,
			default: ''
		}
	},
	data() {
		return {
			imgWidth: 90
		};
	},
	computed: {
		showSolid() {
			const { type, value } = this;
			return type === 'solid' && value !== '';
		},
		showHollow() {
			const { type, value } = this;
			return type === 'hollow' && value !== '';
		},
		showSpecial() {
			const { type, value, specialIcon } = this;
			return type === 'special' && value !== '' && specialIcon !== '';
		},
		showImage() {
			const { type, img } = this;
			return type === 'image' && img !== '';
		},
		tagTextStyle() {
			const { tagColor, showSolid } = this;
			return showSolid ? { backgroundColor: tagColor } : { borderColor: tagColor };
		}
	},
	methods: {
		onLoad(e) {
			if (e.success && e.size && e.size.naturalWidth > 0) {
				const width = e.size.naturalWidth;
				const height = e.size.naturalHeight;
				this.imgWidth = width * (46 / height);
			}
		},
		close(event) {
			this.$emit('close', event);
		}
	}
};
</script>

<style scoped>
.tag-item {
	height: 46rpx;
	justify-content: center;
	align-items: center;
	flex-direction: row;
}
.tag-border {
	border-bottom-left-radius: 4rpx;
	border-bottom-right-radius: 4rpx;
	border-top-left-radius: 4rpx;
	border-top-right-radius: 4rpx;
}
.tag-hollow {
	border-width: 1rpx;
}
.tag-image {
	height: 46rpx;
}
.tag-special {
	border-width: 1rpx;
	flex-direction: row;
	justify-content: center;
	align-items: center;
}
.left-image {
	width: 40rpx;
	height: 40rpx;
}
.tag-left {
	width: 44rpx;
	height: 44rpx;
	align-items: center;
	justify-content: center;
}
.tag-text {
	font-size: 26rpx;
	height: 34rpx;
	line-height: 34rpx;
	padding-left: 16rpx;
	padding-right: 16rpx;
}
</style>
